package com.finadv.assets.service.impl;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.finadv.assets.model.CAMS;
import com.finadv.assets.model.FundInfo;
import com.finadv.assets.model.HolderInfo;
import com.finadv.assets.model.Transaction;
import com.finadv.assets.service.CAMSService;
import io.github.jonathanlink.PDFLayoutTextStripper;
import lombok.extern.slf4j.Slf4j;
import org.apache.pdfbox.cos.COSDocument;
import org.apache.pdfbox.io.RandomAccessFile;
import org.apache.pdfbox.pdfparser.PDFParser;
import org.apache.pdfbox.pdmodel.PDDocument;
import org.apache.pdfbox.text.PDFTextStripper;
import org.springframework.stereotype.Service;
import org.springframework.web.multipart.MultipartFile;

import java.io.File;
import java.io.IOException;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;

/**
 * Service Class for CAMS File Extractions.
 */
@Service
@Slf4j
public class CAMSServiceImpl implements CAMSService {

    public static final int OPEN_TO_TXN_LINE_SKIP = 1;
    public static final String FOLIO_NO = "FolioNo:";
    public static final String READ_MODE = "r";
    public static final String CLOSING_UNIT_BALANCE = "ClosingUnitBalance:";
    public static final String DATE_TRANSACTION_AMOUNT = "DateTransactionAmount";
    public static final String PAGE_END_REGEX = "Page[0-9]+of[0-9]+";
    public static final int DATE_TRANSACTION_SKIP_LINES = 2;
    public static final String NUMBER_REGEX = "[(),a-z]";
    public static final String PAN = "PAN:";
    public static final String EMAIL_ID = "EmailId";
    public static final String REGULAR = "Regular";
    public static final String DIRECT = "Direct";
    public static final String ADVISOR_REGEX = "Advisor";
    public static final String OPENING_UNIT_BALANCE = "OpeningUnitBalance";
    public static final String AMOUNT_REGEX = "[(),]";


    /**
     * Extracts MF Details from Mutual Fund CAMS File Generated by user.
     * @param camsFile the multipart cams file.
     * @param password file password
     * @throws IOException exception on parsing pdf.
     */
    public String extractMFData(MultipartFile camsFile, String password) throws IOException {

        String temDirectory = "java.io.tmpdir";
        File tempCAMSFile = new File(System.getProperty(temDirectory) + "/" + camsFile.getOriginalFilename());
        camsFile.transferTo(tempCAMSFile);
        PDFParser parser = new PDFParser(new RandomAccessFile(tempCAMSFile, READ_MODE), password);

        parser.parse();
        COSDocument cosDoc = parser.getDocument();
        PDFTextStripper pdfStripper = new PDFLayoutTextStripper();
        pdfStripper.setAddMoreFormatting(false);
        PDDocument pdDoc = new PDDocument(cosDoc);
        pdDoc.setAllSecurityToBeRemoved(true);

        String parsedText = pdfStripper.getText(pdDoc);

        List<String> linesList = parsedText.lines().collect(Collectors.toList());
        CAMS camsData = new CAMS();
        HolderInfo holderInfo = new HolderInfo();
        List<FundInfo> fundInfoList = new ArrayList<>();
        for (int folioIndex = 0; folioIndex < linesList.size(); folioIndex++) {
            String line =  linesList.get(folioIndex);
            if (line.replaceAll("\\s", "").contains(EMAIL_ID)) {
                holderInfo.setEmail(line.substring(0, 70).split(":")[1].strip());
                holderInfo.setName(linesList.get(folioIndex + 2).substring(0, 70).strip());
            }

            if (line.replaceAll("\\s", "").contains(FOLIO_NO)) {
                var folio = new FundInfo();
                List<Transaction> transactionList =  new ArrayList<>();
                var folioNamePan = line.split(PAN);
                folio.setFolioName(folioNamePan[0].replaceAll("\\s", "").split(":")[1].strip());
                folio.setPan(folioNamePan[1].strip().substring(0,10).strip());
                System.out.println("Got the Folio No : " + line);
                String scheme = "";
                for (int txnOpenIndex = folioIndex + 1; txnOpenIndex < linesList.size(); txnOpenIndex++) {
                    if (linesList.get(txnOpenIndex).strip().replaceAll("\\s", "").contains(OPENING_UNIT_BALANCE)) {
                        scheme = linesList.subList(folioIndex + 1 , txnOpenIndex).stream()
                                .map(schemeLine -> schemeLine.strip().replaceAll("\\s", "")).collect(Collectors.joining());
                        var schemeAndAdvisor = scheme.split(ADVISOR_REGEX);
                        folio.setSchemeName(schemeAndAdvisor[0].strip());
                        /*if (schemeAndAdvisor[1].contains("ARN")) {
                            folio.setSchemeType(REGULAR);
                        } else {
                            folio.setSchemeType(DIRECT);
                        }*/
                        folioIndex = txnOpenIndex + OPEN_TO_TXN_LINE_SKIP;
                        break;
                    }
                }
                System.out.println("Got the Scheme : " + scheme);
                for (int purchaseListIndex = folioIndex; purchaseListIndex < linesList.size(); purchaseListIndex++) {
                    if (linesList.get(purchaseListIndex).replaceAll("\\s", "").contains(CLOSING_UNIT_BALANCE)){
                        folio.setClosingBalance(parseAmount(linesList.get(purchaseListIndex).substring(0,50).split(":")[1]));
                        folio.setNav(parseAmount(linesList.get(purchaseListIndex).substring(50,100).split(":")[1]
                                .split("INR")[1].strip()));
                        folio.setValuation(parseAmount(linesList.get(purchaseListIndex).substring(100).split(":")[1]
                                .split("INR")[1].strip()));
                        Transaction lastTransaction = new Transaction();
                        lastTransaction.setDate(extractTransactionDate(linesList.get(purchaseListIndex - 1)));
                        System.out.println("Getting all transactions for scheme : "+ scheme);
                        for (int transactionIndex = folioIndex ; transactionIndex < purchaseListIndex; transactionIndex++) {
                            String transactionDetail = linesList.get(transactionIndex).strip();
                            if (transactionDetail.replaceAll("\\s", "").matches(PAGE_END_REGEX)) {
                                System.out.println(transactionDetail);
                                System.out.println("Looks like we have hit a page ending, searching for transactions in next page...");
                                for (int pageEndIndex = transactionIndex; pageEndIndex < linesList.size(); pageEndIndex++) {
                                    if (linesList.get(pageEndIndex).strip().replaceAll("\\s", "").contains(DATE_TRANSACTION_AMOUNT)) {
                                        System.out.println("Got the continued transaction list!");
                                        transactionIndex = pageEndIndex + DATE_TRANSACTION_SKIP_LINES;
                                        break;
                                    }
                                }
                            } else {
                                if (transactionDetail.length() != 0) {
                                    transactionList.add(getTransactionDetails(transactionDetail));
                                }
                                System.out.println(transactionDetail);

                            }
                        }
                        System.out.println("Transactions extracted for scheme : " + scheme);
                        folioIndex = purchaseListIndex;
                        break;
                    }
                }
                fundInfoList.add(folio);
            }
            camsData.setFundInfoList(fundInfoList);
            camsData.setHolderInfo(holderInfo);
        }
        return new ObjectMapper().writeValueAsString(camsData);
    }

    private LocalDate extractTransactionDate(String transactionLine) {
        try {
            return LocalDate.parse(transactionLine.strip().substring(0, 11), DateTimeFormatter.ofPattern("dd-MMM-yyyy"));
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }

    private Transaction getTransactionDetails(String transactionDetail) {
        Transaction transaction = new Transaction();
        try {
            var date = transactionDetail.substring(0, 11);
            transaction.setDate(LocalDate.parse(date, DateTimeFormatter.ofPattern("dd-MMM-yyyy")));
            if (transactionDetail.contains("***")) {
                System.out.println(transactionDetail.substring(12));
            } else if (transactionDetail.contains("(")) {
                System.out.println(transactionDetail);
            } else {
                transaction.setTransactionDetail(transactionDetail.substring(12, 76).strip());
                transaction.setAmount(parseAmount(transactionDetail.substring(76, 90)));
                transaction.setUnits(Double.valueOf(transactionDetail.substring(95, 105).strip().replaceAll(AMOUNT_REGEX, "")));
                transaction.setPrice(Double.valueOf(transactionDetail.substring(110, 125).strip().replaceAll(AMOUNT_REGEX, "")));
                transaction.setUnitBalance(Double.valueOf(transactionDetail.substring(129).strip().replaceAll(AMOUNT_REGEX, "")));
                System.out.println(transactionDetail.substring(12, 79));
            }
        } catch (Exception e) {
            e.printStackTrace();
        }

        return transaction;
    }

    private static Double parseAmount(String amountString) {
        return Double.valueOf(amountString.strip().replaceAll(AMOUNT_REGEX, ""));
    }
}
